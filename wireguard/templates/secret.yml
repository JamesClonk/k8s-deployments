#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels")

#@ if len(data.values.wireguard.network) == 0 or data.values.wireguard.network == "network":
#@  assert.fail("wireguard.network is missing or invalid")
#@ end
#@ if len(data.values.wireguard.address) == 0 or data.values.wireguard.address == "address":
#@  assert.fail("wireguard.address is missing or invalid")
#@ end
#@ if len(data.values.wireguard.dns) == 0 or data.values.wireguard.dns == "public_key":
#@  assert.fail("wireguard.dns is missing or invalid")
#@ end
#@ if len(data.values.wireguard.public_key) == 0 or data.values.wireguard.public_key == "public_key":
#@  assert.fail("wireguard.public_key is missing or invalid")
#@ end
#@ if len(data.values.secrets.wireguard.private_key) == 0 or data.values.secrets.wireguard.private_key == "private_key":
#@  assert.fail("secrets.wireguard.private_key is missing or invalid")
#@ end

#@ if len(data.values.wireguard.clients) == 0:
#@  assert.fail("wireguard.clients are missing or invalid")
#@ end
#@ for idx in range(len(data.values.wireguard.clients)):
#@   client = data.values.wireguard.clients[idx]
#@   if len(client.name) == 0 or client.name == "name":
#@     assert.fail("wireguard.clients[" + str(idx) + "].name is missing")
#@   end
#@   if len(client.allowed_ips) == 0 or client.allowed_ips == "allowed_ips":
#@     assert.fail("wireguard.clients[" + str(idx) + "].allowed_ips is missing or invalid")
#@   end
#@   if len(client.public_key) == 0 or client.public_key == "public_key":
#@     assert.fail("wireguard.clients[" + str(idx) + "].public_key is missing or invalid")
#@   end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: wireguard
  namespace: wireguard
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  wg0.key: #@ data.values.secrets.wireguard.private_key
  wg0.conf: |
    [Interface]
    Address = (@= data.values.wireguard.address @)
    ListenPort = 51820
    DNS = (@= data.values.wireguard.dns @)
    PrivateKey = (@= data.values.secrets.wireguard.private_key @)
    PostUp = wg set wg0 private-key /etc/wireguard/wg0.key && iptables -t nat -A POSTROUTING -s (@= data.values.wireguard.network @) -o eth0 -j MASQUERADE
    PostDown = iptables -t nat -D POSTROUTING -s (@= data.values.wireguard.network @) -o eth0 -j MASQUERADE
    SaveConfig = false

    (@ for client in data.values.wireguard.clients: -@)
    [Peer]
    # Name = (@= client.name @)
    PublicKey = (@= client.public_key @)
    AllowedIPs = (@= client.allowed_ips @)
    (@ end -@)
