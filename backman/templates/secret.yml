#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels", "connstr")

#@ if len(data.values.backman.username) == 0 or data.values.backman.username == "username":
#@  assert.fail("backman.username is missing or invalid")
#@ end
#@ if len(data.values.backman.password) == 0 or data.values.backman.password == "password":
#@  assert.fail("backman.password is missing or invalid")
#@ end
#@ if len(data.values.backman.s3.host) == 0 or data.values.backman.s3.host == "host":
#@  assert.fail("backman.s3.host is missing or invalid")
#@ end
#@ if len(data.values.backman.s3.key) == 0 or data.values.backman.s3.key == "access_key":
#@  assert.fail("backman.s3.key is missing or invalid")
#@ end
#@ if len(data.values.backman.s3.secret) == 0 or data.values.backman.s3.secret == "secret_key":
#@  assert.fail("backman.s3.secret is missing or invalid")
#@ end
#@ if len(data.values.backman.postgres) == 0:
#@  assert.fail("backman.postgres databases are missing or invalid")
#@ end
#@ for idx in range(len(data.values.backman.postgres)):
#@   db = data.values.backman.postgres[idx]
#@   if len(db.name) == 0:
#@     assert.fail("backman.postgres[" + str(idx) + "].name is missing")
#@   end
#@   if len(db.host) == 0 or db.host == "host":
#@     assert.fail("backman.postgres[" + str(idx) + "].host is missing or invalid")
#@   end
#@   if len(db.database) == 0 or db.database == "dbname":
#@     assert.fail("backman.postgres[" + str(idx) + "].database is missing or invalid")
#@   end
#@   if len(db.username) == 0 or db.username == "username":
#@     assert.fail("backman.postgres[" + str(idx) + "].username is missing or invalid")
#@   end
#@   if len(db.password) == 0 or db.password == "password":
#@     assert.fail("backman.postgres[" + str(idx) + "].password is missing or invalid")
#@   end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: backman
  namespace: backman
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  BACKMAN_USERNAME: #@ data.values.backman.username
  BACKMAN_PASSWORD: #@ data.values.backman.password
  PROBE_AUTHORIZATION: #@ 'Basic ' + base64.encode(data.values.backman.username + ':' + data.values.backman.password)
  BACKMAN_CONFIG: |
    {
      "log_level": "debug",
      "logging_timestamp": true,
      "unprotected_metrics": true,
      "s3": {
        "service_label": "user-provided",
        "service_name": "backman-storage",
        "bucket_name": "backman-storage"
      },
      "services": {
        (@- for idx in range(len(data.values.backman.postgres)): -@)
        (@- db = data.values.backman.postgres[idx] -@)
        (@- if idx > 0: -@),
        (@- end @)
        "(@= db.name @)": {
          "retention": {
            "days": 33,
            "files": 33
          },
          "local_backup_path": "/var/run/backman/"
        }
        (@- end @)
      }
    }
  VCAP_APPLICATION: |
    {
      "application_id": "backman",
      "application_name": "backman",
      "application_uris": [
        "backman.backman.pod.cluster.local"
      ],
      "application_version": "latest",
      "name": "backman",
      "organization_name": "backman",
      "space_name": "backman",
      "uris": [
        "backman.backman.pod.cluster.local"
      ],
      "version": "latest"
    }
  VCAP_SERVICES: |
    {
      "user-provided": [{
        "credentials": {
            "region": "eu-west-1",
            "accessHost": "(@= data.values.backman.s3.host @)",
            "accessKey": "(@= data.values.backman.s3.key @)",
            "sharedSecret": "(@= data.values.backman.s3.secret @)"
        },
        "label": "user-provided",
        "name": "backman-storage"
      }
      (@- for db in data.values.backman.postgres: -@)
      , {
        "credentials": {
            "database": "(@= db.database @)",
            "database_uri": "(@= connstr(db.username, db.password, db.host, db.database) @)",
            "jdbcUrl": "(@= connstr(db.username, db.password, db.host, db.database) @)",
            "name": "(@= db.database @)",
            "uri": "(@= connstr(db.username, db.password, db.host, db.database) @)"
        },
        "label": "user-provided",
        "name": "(@= db.name @)"
      }
      (@- end -@)
      ]
    }
