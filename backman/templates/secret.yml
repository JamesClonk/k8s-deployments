#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels", "connstr")

#@ if len(data.values.secrets.backman.username) == 0 or data.values.secrets.backman.username == "username":
#@  assert.fail("secrets.backman.username is missing or invalid")
#@ end
#@ if len(data.values.secrets.backman.password) == 0 or data.values.secrets.backman.password == "password":
#@  assert.fail("secrets.backman.password is missing or invalid")
#@ end
#@ if len(data.values.secrets.backman.s3.bucket) == 0 or data.values.secrets.backman.s3.bucket == "bucket":
#@  assert.fail("secrets.backman.s3.bucket is missing or invalid")
#@ end
#@ if len(data.values.secrets.backman.s3.host) == 0 or data.values.secrets.backman.s3.host == "host":
#@  assert.fail("secrets.backman.s3.host is missing or invalid")
#@ end
#@ if len(data.values.secrets.backman.s3.key) == 0 or data.values.secrets.backman.s3.key == "access_key":
#@  assert.fail("secrets.backman.s3.key is missing or invalid")
#@ end
#@ if len(data.values.secrets.backman.s3.secret) == 0 or data.values.secrets.backman.s3.secret == "secret_key":
#@  assert.fail("secrets.backman.s3.secret is missing or invalid")
#@ end
#@ if len(data.values.secrets.backman.postgres) == 0:
#@  assert.fail("secrets.backman.postgres databases are missing or invalid")
#@ end
#@ for idx in range(len(data.values.secrets.backman.postgres)):
#@   db = data.values.secrets.backman.postgres[idx]
#@   if len(db.name) == 0:
#@     assert.fail("secrets.backman.postgres[" + str(idx) + "].name is missing")
#@   end
#@   if len(db.host) == 0 or db.host == "host":
#@     assert.fail("secrets.backman.postgres[" + str(idx) + "].host is missing or invalid")
#@   end
#@   if db.port < 1:
#@     assert.fail("secrets.backman.postgres[" + str(idx) + "].port is missing")
#@   end
#@   if len(db.database) == 0 or db.database == "dbname":
#@     assert.fail("secrets.backman.postgres[" + str(idx) + "].database is missing or invalid")
#@   end
#@   if len(db.username) == 0 or db.username == "username":
#@     assert.fail("secrets.backman.postgres[" + str(idx) + "].username is missing or invalid")
#@   end
#@   if len(db.password) == 0 or db.password == "password":
#@     assert.fail("secrets.backman.postgres[" + str(idx) + "].password is missing or invalid")
#@   end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: backman
  namespace: backman
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  config.json: |
    {
      "log_level": "debug",
      "logging_timestamp": true,
      "disable_metrics_logging": true,
      "disable_health_logging": true,
      "unprotected_metrics": true,
      "unprotected_health": true,
      "username": "(@= data.values.secrets.backman.username @)",
      "password": "(@= data.values.secrets.backman.password @)",
      "s3": {
        "service_label": "s3",
        "bucket_name": "(@= data.values.secrets.backman.s3.bucket @)",
        "host": "(@= data.values.secrets.backman.s3.host @)",
        "access_key": "(@= data.values.secrets.backman.s3.key @)",
        "secret_key": "(@= data.values.secrets.backman.s3.secret @)"
      },
      "services": {
        (@- for idx in range(len(data.values.secrets.backman.postgres)): -@)
        (@- service = data.values.secrets.backman.postgres[idx] -@)
        (@- if idx > 0: -@),
        (@- end @)
        "(@= service.name @)": {
          "retention": {
            "days": 33,
            "files": 33
          },
          "local_backup_path": "/var/run/backman/"
        }
        (@- end @)
      }
    }

#@ for idx in range(len(data.values.secrets.backman.postgres)):
#@   service = data.values.secrets.backman.postgres[idx]
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ service.name.lower().strip().replace(" ","-").replace("_","-")
  namespace: backman
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: servicebinding.io/postgres
#@yaml/text-templated-strings
stringData:
  name: #@ service.name
  type: postgres
  provider: cluster.local
  host: #@ service.host
  port: #@ str(service.port)
  uri: #@ connstr(service.username, service.password, service.host, service.port, service.database)
  username: #@ service.username
  password: #@ service.password
  database: #@ service.database
#@ end
