#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels", "connstr")

#@ if len(struct.decode(data.values.databases).keys()) == 0:
#@   assert.fail("databases are missing")
#@ end
#@ for key in struct.decode(data.values.databases).keys():
#@   db = getattr(data.values.databases, key)
#@   if len(db.host) == 0 or db.host == "host":
#@     assert.fail("databases.[" + key + "].host is missing or invalid")
#@   end
#@   if len(db.db_name) == 0 or db.db_name == "dbname":
#@     assert.fail("databases.[" + key + "].db_name is missing or invalid")
#@   end
#@   if len(db.username) == 0 or db.username == "username":
#@     assert.fail("databases.[" + key + "].username is missing or invalid")
#@   end
#@   if len(db.password) == 0 or db.password == "password":
#@     assert.fail("databases.[" + key + "].password is missing or invalid")
#@   end
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: pgweb
  namespace: pgweb
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  #@ for key in struct.decode(data.values.databases).keys():
  #@   db = getattr(data.values.databases, key)
  (@= key @).toml: |
    url = "(@= connstr(db.username, db.password, db.host, db.db_name) @)"
  #@ end
  init-dbs.sql: |
    (@ for key in struct.decode(data.values.databases).keys(): @)
    (@-   db = getattr(data.values.databases, key) -@)
    CREATE DATABASE (@= db.db_name @);
    CREATE ROLE (@= db.username @) LOGIN PASSWORD '(@= db.password @)';
    GRANT ALL PRIVILEGES ON DATABASE (@= db.db_name @) TO (@= db.username @);
    (@ end @)
