#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels")

#@ if len(data.values.adguardhome.storage.class_name) == 0:
#@  assert.fail("data.values.adguardhome.storage.class_name cannot be empty")
#@ end
#@ if len(data.values.adguardhome.storage.size) == 0:
#@  assert.fail("data.values.adguardhome.storage.size cannot be empty")
#@ end

#@ if data.values.adguardhome.storage.reclaim:
#@ if len(data.values.adguardhome.storage.volume_handle) == 0:
#@  assert.fail("data.values.adguardhome.storage.volume_handle cannot be empty")
#@ end
#@ if len(data.values.adguardhome.storage.driver) == 0:
#@  assert.fail("data.values.adguardhome.storage.driver cannot be empty")
#@ end
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pvc-adguardhome
  namespace: adguardhome
  labels: #@ labels("pv")
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: #@ data.values.adguardhome.storage.size
  csi:
    driver: #@ data.values.adguardhome.storage.driver
    fsType: ext4
    volumeHandle: #@ str(data.values.adguardhome.storage.volume_handle)
  storageClassName: #@ data.values.adguardhome.storage.class_name
#@ end

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: adguardhome
  namespace: adguardhome
  labels: #@ labels("pvc")
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: #@ data.values.adguardhome.storage.size
  storageClassName: #@ data.values.adguardhome.storage.class_name
  #@ if/end data.values.adguardhome.storage.reclaim:
  volumeName: pvc-adguardhome
