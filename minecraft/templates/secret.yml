#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels")

#@ if len(data.values.secrets.minecraft.rcon_password) == 0 or data.values.secrets.minecraft.rcon_password == "password":
#@  assert.fail("secrets.minecraft.rcon_password is missing or invalid")
#@ end
#@ if len(data.values.secrets.minecraft.backup.s3.access_key_id) == 0 or data.values.secrets.minecraft.backup.s3.access_key_id == "access_key":
#@  assert.fail("secrets.minecraft.backup.s3.access_key_id is missing or invalid")
#@ end
#@ if len(data.values.secrets.minecraft.backup.s3.secret_access_key) == 0 or data.values.secrets.minecraft.backup.s3.secret_access_key == "secret_key":
#@  assert.fail("secrets.minecraft.backup.s3.secret_access_key is missing or invalid")
#@ end
#@ if len(data.values.secrets.minecraft.backup.s3.endpoint) == 0 or data.values.secrets.minecraft.backup.s3.endpoint == "http://example/deadbeef":
#@  assert.fail("secrets.minecraft.backup.s3.endpoint is missing or invalid")
#@ end
#@ if len(data.values.secrets.minecraft.backup.s3.bucket) == 0 or data.values.secrets.minecraft.backup.s3.bucket == "bucketname":
#@  assert.fail("secrets.minecraft.backup.s3.bucket is missing or invalid")
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: minecraft
  namespace: minecraft
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  RCON_PORT: "25575"
  RCON_PASSWORD: #@ data.values.secrets.minecraft.rcon_password
  S3_ACCESS_KEY: #@ data.values.secrets.minecraft.backup.s3.access_key_id
  S3_SECRET_KEY: #@ data.values.secrets.minecraft.backup.s3.secret_access_key
  S3_ENDPOINT: #@ data.values.secrets.minecraft.backup.s3.endpoint
  S3_BUCKET: #@ data.values.secrets.minecraft.backup.s3.bucket
