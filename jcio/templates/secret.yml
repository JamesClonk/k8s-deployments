#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels", "connstr")

#@ if len(data.values.moviedb.hmac_secret) == 0 or data.values.moviedb.hmac_secret == "secret":
#@  assert.fail("moviedb.hmac_secret is missing or invalid")
#@ end
#@ if len(data.values.moviedb.backend.database.host) == 0 or data.values.moviedb.backend.database.host == "host":
#@   assert.fail("moviedb.backend.database.host is missing or invalid")
#@ end
#@ if len(data.values.moviedb.backend.database.database) == 0 or data.values.moviedb.backend.database.database == "dbname":
#@   assert.fail("moviedb.backend.database.database is missing or invalid")
#@ end
#@ if len(data.values.moviedb.backend.database.username) == 0 or data.values.moviedb.backend.database.username == "username":
#@   assert.fail("moviedb.backend.database.username is missing or invalid")
#@ end
#@ if len(data.values.moviedb.backend.database.password) == 0 or data.values.moviedb.backend.database.password == "password":
#@   assert.fail("moviedb.backend.database.password is missing or invalid")
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: jcio
  namespace: jcio
  labels: #@ labels("secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  JCIO_HTTP_HMAC_SECRET: #@ data.values.moviedb.hmac_secret
  JCIO_DATABASE_TYPE: postgres
  VCAP_SERVICES: |
    {
      "user-provided": [
       {
        "credentials": {
         "uri": "(@= connstr(data.values.moviedb.backend.database.username, data.values.moviedb.backend.database.password, data.values.moviedb.backend.database.host, data.values.moviedb.backend.database.database) @)"
        },
        "label": "user-provided",
        "name": "moviedb"
       }
      ]
    }
